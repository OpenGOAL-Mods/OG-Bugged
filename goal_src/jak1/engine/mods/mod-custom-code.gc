;;-*-Lisp-*-
(in-package goal)

;; name: mod-custom-code.gc
;; name in dgo: mod-custom-code
;; dgos: TODO


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is this file for.
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| This file contains function defenitions that are pre placed in the mod base,
so if you place custom code inside of these functions, it will exectue based on
the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
an orb |#


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Begin function defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun mod-override-child-fuel-cell-movie-pos ((dst vector) (obj fuel-cell) (maybe-parent process))
  (case (-> (ppointer->process (-> obj parent)) name) :comp name=
    (('billy-2) ;; rats
      (set-vector-meters! dst 596.80 2.17 -2026.90)
      (set-vector-meters! (res-lump-struct (-> obj entity) 'movie-pos (vector) :time (the-as float -1000000000.0)) 596.80 2.17 -2026.90)
      )
    ;; this didnt work for some reason anyway, but im pretty sure I had it working in orb hunt? 
    ;; (('pelican-1)
    ;;   (when (name= (-> (the pelican (ppointer->process (-> obj parent))) state name) 'pelican-explode)
    ;;     (vector-copy! dst (-> (the pelican (ppointer->process (-> obj parent))) root trans))
    ;;     )
    ;;   )
    )
  (none)
  )


(define *currentCutsceneFrame* 0)
(define *currentSpoolName* "")

(defun runs-every-frame ()
  (when (handle->process (-> *art-control* spool-lock))
    (with-proc ((handle->process (-> *art-control* spool-lock)))
      (set! *currentCutsceneFrame* (the int (ja-aframe-num 0)))
      )
    (set! *currentSpoolName* (-> *art-control* active-stream))
    )

  ;; custom cutscene stuff
  
  (when (string= *currentSpoolName* "green-sagecage-outro-big-finish")
    ;; (format 0 "~S ~D~%" *currentSpoolName* *currentCutsceneFrame*)
    (when (= *currentCutsceneFrame* 590)
      ;; final door zed quote
      (process-spawn-function process 
        (lambda :behavior process () 
          (let ((stime (current-time)))
            (format 0 "playing zed select~%")
            (play-rand-sound "snd/Zed_Select.ogg" 80)
            (until (> (- (current-time) stime) (seconds 3.5))
              (suspend)
              )
            )
          )
        )
      )
    (when (= *currentCutsceneFrame* 630)
      ;; final door gol NOOO
      (process-spawn-function process 
        (lambda :behavior process () 
          (let ((stime (current-time)))
            (format 0 "playing gol NOOO~%")
            (play-rand-sound "snd/gol-nooo.mp3" 100) 
            (until (> (- (current-time) stime) (seconds 3.5))
              (suspend)
              )
            )
          )
        )
      )
    (when (= *currentCutsceneFrame* 710)
      ;; final door fart
      (process-spawn-function process 
        (lambda :behavior process () 
          (let ((stime (current-time)))
            (format 0 "playing fart~%")
            (play-rand-sound "snd/random-fart-1.mp3" 100) 
            (until (> (- (current-time) stime) (seconds 1.5))
              (suspend)
              )
            )
          )
        )
      )
    )

  ;; credits warp if you're in finalboss with only 4 cells and we haven't already played credits
  (let ((boss (the robotboss (process-by-ename "robotboss-3")))
        (sage (the sage-finalboss (process-by-ename "sage-finalboss-1")))
        )
    (when (and (> (-> *display* base-frame-counter) (-> *game-info* blackout-time))
               *target*
               boss
               (= (level-status *level* 'finalboss) 'active)
               (or (not sage) (not (-> sage credits-played)))
               (not (task-closed? (game-task finalboss-movies) (task-status need-reminder-a)))
               (= (-> *game-info* fuel) 4))
      (format 0 "birthing sage-finalboss-1 ~%")
      (birth! (entity-by-name "sage-finalboss-1"))
      )
    )

  ;; geyser > origin warp
  (when (in-bubble-meters? -1185.37 10.80 893.62 2.0)
    (set-vector! (-> *target* root trans) 0.0 0.0 0.0 1.0)
    )

  (when (and (cpad-hold? 0 l1) (cpad-hold? 0 r1) (cpad-hold? 0 l2) (cpad-hold? 0 r2)
            (movie?) (-> *art-control* spool-lock) (-> *art-control* active-stream)
            )
    (case-str (-> *art-control* active-stream)
      (("fuel-cell-victory" "fuel-cell-victory-2" "fuel-cell-victory-3" "fuel-cell-victory-4" "fuel-cell-victory-5" "fuel-cell-victory-6" "fuel-cell-victory-7" "fuel-cell-victory-8" "fuel-cell-racer-victory-1" "fuel-cell-flut-victory-1")
        ;; nothing, don't allow exiting cell cutscenes
        )
      (else
        ;; unlock jak during cutscene
        (process-release? *target*)
        )
      )
    )

  ;; death deload on 0HP when not in death state, no iframes, and holding face button
  (when (and (zero? (-> *target* fact-info-target health))
             (not (logtest? (-> *target* state-flags) (state-flags timed-invulnerable)))
             (or (cpad-hold? 0 x) (cpad-hold? 0 square) (cpad-hold? 0 circle))
             )
    (case (-> *target* state name)
      (('target-death 'target-death 'target-death 'target-death)
        ;; RIPBOZO
        )
      (else
        ;; death deload
        (restore-load-state-and-cleanup *load-state*)
        )
      )
    )

  ;; klaww skip
  (let ((klaww (process-by-ename "ogreboss-1")))
    (when (and klaww
              (string= (-> *art-control* active-stream) "plunger-lurker-blowup")
              )
      (logior! (-> klaww entity extra perm status) (entity-perm-status complete))
      )
    )

  (if *show-input-display* 
    (input-display-on)
    (input-display-off)
    )

    (when (in-bubble-meters? 3021.48 500.00 -4851.23 5.0)
    (send-event (process-by-ename "robotboss-3") 'white-eco-picked-up)
    )
    
  (none)
  )

(defun runs-on-orb-pickup ((parent process-tree))
  (let* ((from-cache? (and parent (type-type? (-> parent type) orb-cache-top))))
    ;; Code here runs on ANY orb pickup


    (when from-cache?
      ;; Code here runs only if the orb was from an orb cache

      )

    (when (not from-cache?)
      ;; Code here runs only if the orb was NOT from an orb cache

      )
    )
  (none)
  )

(defun runs-on-fly-pickup ()
  ;; Code here runs on any scout fly pickup

  (none)
  )

(defun runs-on-cell-pickup ((cell-event symbol))
  (case cell-event
    (('pickup)      
      ;; Code here runs as soon as you pickup a powercell

      )
    (('cutscene-end)      
      ;; Code here runs at the end of any powercell cutscene

      )
    )

  (none)
  )

(defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
  (let* ((from-vent? (and parent (type-type? (-> parent type) vent))))
    ;; Code here runs as soon as you pickup ANY eco

    (case eco-type
      (((pickup-type eco-yellow))      
        ;; Code here runs as soon as you pickup yellow eco

        )
      (((pickup-type eco-red))      
        ;; Code here runs as soon as you pickup red eco

        )
      (((pickup-type eco-blue))      
        ;; Code here runs as soon as you pickup blue eco

        )
      (((pickup-type eco-pill))      
        ;; Code here runs as soon as you pickup small green eco

        )
      (((pickup-type eco-green))      
        ;; Code here runs as soon as you pickup big green eco 

        )
      )
    
    (when from-vent?
      ;; Code here runs only if the eco was picked up from a vent

      )
    )

  (none)
  )

(define *robber-cell* (the handle #f))
(defun runs-on-jak-spawn ()
  ;; Code here runs every time jak spawns (loading a file new game or death)
  
  ;; if robbers not complete, check if any robbers are dead, if so spawn cell
  (when (and (= (level-status *level* 'rolling) 'active)
             (not (task-closed? (game-task rolling-robbers) (task-status need-resolution)))
             (not (handle->process *robber-cell*))
             )
    (let ((robber2 (entity-by-name "robber-2"))
          (robber3 (entity-by-name "robber-3"))
          (robber4 (entity-by-name "robber-4"))
          (robber5 (entity-by-name "robber-5"))
          (v (new 'stack-no-clear 'vector))
          )
      (cond
        ((logtest? (-> robber2 extra perm status) (entity-perm-status complete))
          (vector-copy! v (-> robber2 extra trans))
          (+! (-> v y) (meters 2))
          (set! *robber-cell* (ppointer->handle
            (birth-pickup-at-point
              v
              (pickup-type fuel-cell)
              (the float (game-task rolling-robbers))
              #f
              *entity-pool*
              (the-as fact-info #f)
              )
            ))
          )
        ((logtest? (-> robber3 extra perm status) (entity-perm-status complete))
          (vector-copy! v (-> robber3 extra trans))
          (+! (-> v y) (meters 2))
          (set! *robber-cell* (ppointer->handle
            (birth-pickup-at-point
              v
              (pickup-type fuel-cell)
              (the float (game-task rolling-robbers))
              #f
              *entity-pool*
              (the-as fact-info #f)
              )
            ))
          )
        ((logtest? (-> robber4 extra perm status) (entity-perm-status complete))
          (vector-copy! v (-> robber4 extra trans))
          (+! (-> v y) (meters 2))
          (set! *robber-cell* (ppointer->handle
            (birth-pickup-at-point
              v
              (pickup-type fuel-cell)
              (the float (game-task rolling-robbers))
              #f
              *entity-pool*
              (the-as fact-info #f)
              )
            ))
          )
        ((logtest? (-> robber5 extra perm status) (entity-perm-status complete))
          (vector-copy! v (-> robber5 extra trans))
          (+! (-> v y) (meters 2))
          (set! *robber-cell* (ppointer->handle
            (birth-pickup-at-point
              v
              (pickup-type fuel-cell)
              (the float (game-task rolling-robbers))
              #f
              *entity-pool*
              (the-as fact-info #f)
              )
            ))
          )
        )
      )
    )
  (none)
  )

(defun runs-on-jak-death ((death-event symbol))
  (case death-event
    (('dying)
      ;; Code here runs immediately every time jak dies, before any death animation or death cutscene

      (when (and (logtest? (-> *target* control root-prim prim-core action) (collide-action racer))
                 (= (level-status *level* 'rolling) 'active)
                 (string= (-> *game-info* current-continue name) "ogre-race")
                 )
        ;; LTSS - if you hit the nick: ogr and ogre-race load boundaries with zoomer IJs, have a free LTS
        (level-status-set! (level-get *level* 'rolling) 'loaded)  ;; deload basin so we dont get *load-state*-ed back there
        (set! (-> *game-info* current-continue) (get-continue-by-name *game-info* "lavatube-middle"))
        )
      )
    (('blackout)
      ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

      )
    )
  
  (none)
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; deprecated function defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| these are no longer recommended/supported however we include them anyways to not break anyones mods.
|#
